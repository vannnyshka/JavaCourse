package lessons.eight.exceptions.bank;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class BankAccount{
    /*–ó–∞–¥–∞—á–∞ 8.1 –ò—Å–∫–ª—é—á–µ–Ω–∏—è –≤ javaüìç
     #### –û–ø–∏—Å–∞–Ω–∏–µ
     –°–æ–∑–¥–∞–π—Ç–µ Java-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –º–æ–¥–µ–ª–∏—Ä—É—é—â–µ–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

     #### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

     1. **–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å BankAccount** —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
        - accountNumber (–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞, —Ç–∏–ø–∞ String)
        - balance (–±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞, —Ç–∏–ø–∞ double)

     2. **–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ BankAccount:**
        - deposit(double amount) ‚Äî –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞. –ï—Å–ª–∏ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –≤—ã–±—Ä–æ—Å—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ IllegalArgumentException —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π".
        - withdraw(double amount) ‚Äî –º–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤. –ï—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞, –≤—ã–±—Ä–æ—Å—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ InsufficientFundsException —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ".
        - transfer(BankAccount targetAccount, double amount) ‚Äî –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—á–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã withdraw –∏ deposit –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏, –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –ï—Å–ª–∏ targetAccount —Ä–∞–≤–µ–Ω null, –≤—ã–±—Ä–æ—Å—å—Ç–µ NullPointerException.

     3. **–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ InsufficientFundsException:**
        - –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç Exception –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ.
     –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å Main:–ª–∞—Å—Å Main:**
        - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω—è—Ç—å —Å—É–º–º—É, –ø—Ä–µ–≤—ã—à–∞—é—â—É—é –±–∞–ª–∞–Ω—Å, –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—É–º–º—É —Å –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–π, –æ–±—Ä–∞–±–æ—Ç–∞–≤ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

     #### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
     1. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
     2. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.*/

    private static List<BankAccount> bankAccounts = new ArrayList<>();

    private String accountNumber;
    private double balance;

    public BankAccount(String accountNumber, double balance) {
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }


    public double getBalance() {
        return balance;
    }
    /* - deposit(double amount) ‚Äî –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞. –ï—Å–ª–∏ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –≤—ã–±—Ä–æ—Å—å—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ IllegalArgumentException —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π".*/
    public void deposit(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }
        this.balance += amount;
        System.out.println("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: " + amount + "\n–ë–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç—É –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: " + this.balance);
    }

    public static void addAccount(BankAccount account) {
        bankAccounts.add(account);
    }

    public static BankAccount getAccount(int index) {
        if(index > bankAccounts.size()){
            throw new IndexOutOfBoundsException("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –±–æ–ª—å—à–∏–π, —á–µ–º —Å–∞–º —Å–ø–∏—Å–æ–∫");
        }
        return bankAccounts.get(index);
    }
    /*        - withdraw(double amount) ‚Äî –º–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤. –ï—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞, –≤—ã–±—Ä–æ—Å—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ InsufficientFundsException —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ".
     */
    public void withdraw(double amount) throws InsufficientFundsException {
        if (amount > this.balance) {
            throw new InsufficientFundsException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ");
        }
        this.balance -= amount;
    }
    /*  - transfer(BankAccount targetAccount, double amount) ‚Äî –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—á–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã withdraw –∏ deposit –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏, –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –ï—Å–ª–∏ targetAccount —Ä–∞–≤–µ–Ω null, –≤—ã–±—Ä–æ—Å—å—Ç–µ NullPointerException.*/
    public void transfer(BankAccount targetAccount, double amount) throws InsufficientFundsException {
        if (bankAccounts.stream().noneMatch(acc -> acc.equals(targetAccount))) {
            throw new NullPointerException("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç");
        } else {
            withdraw(amount);
            targetAccount.deposit(amount);
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BankAccount that = (BankAccount) o;
        return Double.compare(balance, that.balance) == 0 && Objects.equals(accountNumber, that.accountNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accountNumber, balance);
    }

    @Override
    public String toString() {
        return "BankAccount{" + "accountNumber='" + accountNumber + '\'' + ", balance=" + balance + '}';
    }
}
